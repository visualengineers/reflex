<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <PackageId>ReFlex.TrackingServer</PackageId>
    <Authors>Mathias Müller</Authors>
    <Copyright>Copyright © 2021-2025</Copyright>
    <Company>
      GTV - Gesellschaft fuer Technische Visualistik mbH, Dresden
      Hochschule fuer Technik und Wirtschaft Dresden, Dresden
    </Company>
    <Version>1.0.0</Version>
    <Product>ReFlex.Utilities</Product>
    <AssemblyName>ReFlex.TrackingServer</AssemblyName>
    <RootNamespace>ReFlex.TrackingServer</RootNamespace>
    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
    <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
    <Nullable>enable</Nullable>
    <IsPackable>false</IsPackable>
    <SpaRoot>ClientApp\</SpaRoot>
    <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>
    <SpaProxyServerUrl>https://localhost:4200</SpaProxyServerUrl>
    <SpaProxyLaunchCommand>npm start</SpaProxyLaunchCommand>
    <ImplicitUsings>enable</ImplicitUsings>
    <Platforms>x64;ARM64</Platforms>
    <DefineAdditionalConstants/>
    <!-- Set this to true if you enable server-side prerendering -->
    <BuildServerSideRenderer>false</BuildServerSideRenderer>
    <LangVersion>10</LangVersion>
    <Configurations>Debug;Release;CI</Configurations>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Platform)' == 'ARM64'">
    <PlatformTarget>ARM64</PlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Platform)' == 'x64' Or '$(Platform)' == 'AnyCPU'">
    <PlatformTarget>x64</PlatformTarget>
    <!--        <DefineConstants>TRACE;MS_AZURE_KINECT;INTEL_REALSENSE</DefineConstants>-->
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'CI' ">
    <PlatformTarget>ARM64</PlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x64' ">
    <DefineConstants>TRACE; MS_AZURE_KINECT</DefineConstants>
  </PropertyGroup>
  <PropertyGroup>
    <!-- Define additional preprocessor directives -->
    <DefineConstants Condition="'$(DefineAdditionalConstants)' != ''">$(DefineConstants);$(DefineAdditionalConstants)</DefineConstants>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="ElectronNET.API" Version="23.6.2" />
    <PackageReference Include="Grpc.AspNetCore" Version="2.67.0" />
    <PackageReference Include="Microsoft.AspNetCore.Mvc.NewtonsoftJson" Version="8.0.11" />
    <PackageReference Include="Microsoft.AspNetCore.SpaProxy" Version="8.0.11" />
    <PackageReference Include="Microsoft.AspNetCore.SpaServices.Extensions" Version="8.0.12" />
    <PackageReference Include="Microsoft.CodeCoverage" Version="17.12.0" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection.Abstractions" Version="9.0.0" />
    <PackageReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Design" Version="9.0.0" />
    <PackageReference Include="NLog.Web.AspNetCore" Version="5.3.15" />
    <PackageReference Include="Prism.Core" Version="9.0.537" />
    <PackageReference Include="ServiceStack.Text" Version="8.5.2" />
    <PackageReference Include="SixLabors.ImageSharp" Version="3.1.6" />
    <PackageReference Include="System.Reactive" Version="6.0.1" />
  </ItemGroup>

  <ItemGroup>
    <!-- Don't publish the SPA source files, but do show them in the project files list -->
    <Content Remove="$(SpaRoot)**" />
    <None Remove="$(SpaRoot)**" />
    <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
    <Content Update="wwwroot\Config\TrackingSettings_default.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
  </ItemGroup>
  <ItemGroup Condition="'$(DefineConstants.Contains(MS_AZURE_KINECT))' == true ">
    <ProjectReference Include="..\..\library\src\Sensor\AzureKinectModule\AzureKinectModule.csproj" />
  </ItemGroup>
  <ItemGroup Condition="'$(DefineConstants.Contains(MS_KINECT2))' == true">
    <ProjectReference Include="..\..\library\src\Sensor\Kinect2Module\Kinect2Module.csproj" />
  </ItemGroup>
  <ItemGroup Condition="'$(DefineConstants.Contains(INTEL_REALSENSE))' == true">
    <ProjectReference Include="..\..\library\src\Sensor\RealSenseL515Module\RealSenseL515Module.csproj" />
    <ProjectReference Include="..\..\library\src\Sensor\RealSenseR2Module\RealSenseR2Module.csproj" />
    <ProjectReference Include="..\..\library\src\Sensor\RealSenseR435Module\RealSenseD435Module.csproj" />
  </ItemGroup>
  <ItemGroup>
    <Content Update="wwwroot\Config\TrackingSettings.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

    <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
    <!-- Ensure Node.js is installed -->
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
    <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
  </Target>

  <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
    <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
    <Exec WorkingDirectory="$(SpaRoot)..\..\" Command="npm install" />
    <Exec WorkingDirectory="$(SpaRoot)..\..\" Command="npm run build:shared-types" />
    <!-- <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" /> -->
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build -- --configuration production" />

    <!-- Include the newly-built files in the publish output -->
    <ItemGroup>
      <DistFiles Include="$(SpaRoot)dist\**; $(SpaRoot)dist-server\**" />
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <!-- Copy files to wwwroot - paths not workign anymore, need to be adjusted (where ?) -->
        <!-- <RelativePath>wwwroot\%(RecursiveDir)%(FileName)%(Extension)</RelativePath> -->
        <!-- workign solution: copy files to resources/bin/ClientApp/dist -->
        <RelativePath>%(DistFiles.Identity)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
        <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>
  <ItemGroup>
    <None Update="Assets\app_icon.ico">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Assets\app_icon.png">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
  </ItemGroup>
  <ItemGroup>
    <Content Update="electron.manifest.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>
  <ItemGroup>
    <None Remove="Protos\greet.proto" />
    <Protobuf Include="Protos\greet.proto" GrpcServices="Both" />
    <None Remove="Protos\interactionService.proto" />
    <Protobuf Include="Protos\interactionService.proto">
      <Generator>MSBuild:Compile</Generator>
    </Protobuf>
    <None Remove="Protos\interactionTypes.proto" />
    <Protobuf Include="Protos\interactionTypes.proto">
      <Generator>MSBuild:Compile</Generator>
    </Protobuf>
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\..\library\src\Core\Common\Common.csproj" />
    <ProjectReference Include="..\..\library\src\Core\Implementation\Implementation.csproj" />
    <ProjectReference Include="..\..\library\src\Sensor\EmulatorModule\EmulatorModule.csproj" />
  </ItemGroup>
</Project>
